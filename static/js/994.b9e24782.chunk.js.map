{"version":3,"file":"static/js/994.b9e24782.chunk.js","mappings":"4TAIMA,EAAuBC,EAAAA,YAAiB,WAS3CC,GAAQ,IARTC,EAQS,EARTA,SACAC,EAOS,EAPTA,QACAC,EAMS,EANTA,UACAC,EAKS,EALTA,KAKS,IAHTC,GAAIC,OAGK,MAHO,MAGP,EAFTC,EAES,EAFTA,UACGC,GACM,YACTP,GAAWQ,EAAAA,EAAAA,IAAmBR,EAAU,WACxC,IAAMS,EAAkB,GAAH,OAAMT,EAAN,YAAkBE,GACvC,OAAoBQ,EAAAA,EAAAA,KAAKL,GAAD,QAAC,QACvBN,IAAKA,GACFQ,GAFmB,IAGtBD,UAAWK,IAAWL,EAAWG,EAAiBN,GAAQ,GAAJ,OAAOM,EAAP,YAA0BN,GAAQF,GAAW,QAAJ,OAAYA,MAE9G,IACDJ,EAAQe,YAAc,UACtB,Q,UC0GA,EA1Ha,WACX,OAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GACrBC,GAAWC,EAAAA,EAAAA,MACXC,EAAYC,0CAEZC,GAAgBC,EAAAA,EAAAA,UAChBC,GAAmBD,EAAAA,EAAAA,UAMnBE,EAAa,yCAAG,WAAOC,GAAP,gFACpBA,EAAMC,iBACAC,EAAaN,EAAcO,QAAQC,MACnCC,EAAgBP,EAAiBK,QAAQC,MAC/CE,aAAaC,QACX,SACAL,EAAWM,MAAM,EAAGN,EAAWO,QAAQ,OAGzCrB,GAAa,GAIXsB,EADEzB,EACC,oFAAgFS,GAEhF,wEAAoEA,GAGzEiB,MAAMD,EAAK,CACTE,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOd,EACPe,SAAUZ,EACVa,mBAAmB,IAErBC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAEL,OADAjC,GAAa,GACTiC,EAAIC,GACCD,EAAIE,OAEJF,EAAIE,OAAOH,MAAK,SAACI,GACtB,IAAIC,EAAe,yBAMnB,MAJID,GAAQA,EAAKE,OAASF,EAAKE,MAAMC,UACnCF,EAAeD,EAAKE,MAAMC,SAGtB,IAAIC,MAAMH,EACjB,GAEJ,IACAL,MAAK,SAACI,GACL,IAAMK,EAAiB,IAAIC,MACzB,IAAIA,MAAOC,UAA8B,KAAjBP,EAAKQ,WAE/B3C,EAAQ4C,aAAaT,EAAKU,QAASL,EAAeM,YAClD3C,GAAU,EAAG,CAAE4C,SAAS,GACzB,IACAC,OAAM,SAACC,GACNC,MAAMD,EAAIX,QACX,IAtDiB,2CAAH,sDAyDnB,OACE,oBAASlD,UAAU,kCAAnB,UACE,kBAAMA,UAAU,YAAY+D,SAAUzC,EAAtC,WACE,iBAAKtB,UAAU,OAAf,WACE,kBAAOgE,QAAQ,aAAahE,UAAU,aAAtC,oBAGA,kBACEiE,KAAK,QACLjE,UAAU,eACVkE,GAAG,aACH,mBAAiB,YACjBzE,IAAK0B,QAGT,iBAAKnB,UAAU,OAAf,WACE,kBAAOgE,QAAQ,gBAAgBhE,UAAU,aAAzC,2BAGA,kBACEiE,KAAK,WACLjE,UAAU,eACVkE,GAAG,gBACHzE,IAAK4B,OAGRX,GACC,gBAAKV,UAAU,oCAAf,UACE,SAAC,EAAD,CAASJ,UAAU,SAASD,QAAQ,eAGtC,0BACE,mBACEsE,KAAK,SACLjE,UAAU,8BACVmE,QAhGc,WACxB1D,GAAc,SAAC2D,GAAD,OAAWA,CAAX,GACf,EA2FS,SAKG5D,EAAa,iBAAmB,mCAIrCE,IACA,mBAAQuD,KAAK,SAASjE,UAAU,iBAAhC,SACGQ,EAAa,SAAW,eAMpC,C","sources":["../node_modules/react-bootstrap/esm/Spinner.js","pages/Auth.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Spinner = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  variant,\n  animation,\n  size,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  const bsSpinnerPrefix = `${bsPrefix}-${animation}`;\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsSpinnerPrefix, size && `${bsSpinnerPrefix}-${size}`, variant && `text-${variant}`)\n  });\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import { useState, useRef, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport Spinner from \"react-bootstrap/Spinner\";\nimport AuthContext from \"../store/AuthContext\";\nimport \"./Auth.css\";\n\nconst Auth = () => {\n  const [hasAccount, setHasAccount] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const authCtx = useContext(AuthContext);\n  const navigate = useNavigate();\n  const googleApi = process.env.REACT_APP_GOOGLE_API;\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const switchModeHandler = () => {\n    setHasAccount((prev) => !prev);\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    const emailInput = emailInputRef.current.value;\n    const passwordInput = passwordInputRef.current.value;\n    localStorage.setItem(\n      \"userId\",\n      emailInput.slice(0, emailInput.indexOf(\"@\"))\n    );\n\n    setIsLoading(true);\n\n    let url;\n    if (hasAccount) {\n      url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${googleApi}`;\n    } else {\n      url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${googleApi}`;\n    }\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: emailInput,\n        password: passwordInput,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = \"Authentication failed!\";\n\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        const expirationTime = new Date(\n          new Date().getTime() + +data.expiresIn * 1000\n        );\n        authCtx.loginHandler(data.idToken, expirationTime.toString());\n        navigate(-1, { replace: true });\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  return (\n    <section className=\"auth-section container mt-5 p-5\">\n      <form className=\"auth-form\" onSubmit={submitHandler}>\n        <div className=\"mb-3\">\n          <label htmlFor=\"emailInput\" className=\"form-label\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            id=\"emailInput\"\n            aria-describedby=\"emailHelp\"\n            ref={emailInputRef}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"passwordInput\" className=\"form-label\">\n            密碼\n          </label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            id=\"passwordInput\"\n            ref={passwordInputRef}\n          />\n        </div>\n        {isLoading ? (\n          <div className=\"d-flex m-5 justify-content-center\">\n            <Spinner animation=\"border\" variant=\"warning\" />\n          </div>\n        ) : (\n          <div>\n            <button\n              type=\"button\"\n              className=\"btn btn-toggleMode border-0\"\n              onClick={switchModeHandler}\n            >\n              {hasAccount ? \"Create Account\" : \"Login with existing account\"}\n            </button>\n          </div>\n        )}\n        {!isLoading && (\n          <button type=\"submit\" className=\"btn btn-submit\">\n            {hasAccount ? \"Signin\" : \"Signup\"}\n          </button>\n        )}\n      </form>\n    </section>\n  );\n};\n\nexport default Auth;\n"],"names":["Spinner","React","ref","bsPrefix","variant","animation","size","as","Component","className","props","useBootstrapPrefix","bsSpinnerPrefix","_jsx","classNames","displayName","useState","hasAccount","setHasAccount","isLoading","setIsLoading","authCtx","useContext","AuthContext","navigate","useNavigate","googleApi","process","emailInputRef","useRef","passwordInputRef","submitHandler","event","preventDefault","emailInput","current","value","passwordInput","localStorage","setItem","slice","indexOf","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","errorMessage","error","message","Error","expirationTime","Date","getTime","expiresIn","loginHandler","idToken","toString","replace","catch","err","alert","onSubmit","htmlFor","type","id","onClick","prev"],"sourceRoot":""}